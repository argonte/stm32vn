= Cách tính CRC-8 trong việc kiểm soát lỗi dữ liệu được truyền =
== Cách 1: Phương pháp Direct Calculation ==

Giả sử ta có chuỗi data như sau: 

MSB LSB 
10000000 00000001 10100011 = Data String (80 01 A3 h) 

Đa thức sử dụng để tính CRC-8: 

g(D) = D8 + D2 + D + 1	 => 1 0000 0111 (Polynomial) (CRC-8-CCITT) 

Tư tưởng chính là ta cứ thực hiện phép XOR giữa data string và polynomial. 

Đối với chuỗi data string, ta thêm 8 bits 0 vào cuối (ở vị trí LSB) 1 lần duy nhất trước khi thực hiện các phép XOR sau đó. 

Lưu ý là bit đầu tiên trong Polynomial ( 1 0000 0111 ) được align thẳng hàng với bit có giá trị là 1 đầu tiên trong data string tính từ MSB ( 1 0000000 00000001 10100011 00000000 ) 

Phép XOR có rule như sau: 

0 + 0 => 0 
1 + 1 => 0 
0 + 1 => 1 
1 + 0 => 1 

Điều kiện dừng của phép lặp XOR là khi ta align polynomial với data string thì tính từ vị trí xuất hiện giá trị 1 đầu tiên của data string đến cuối data string không đủ 8 bit. 

Nên kết quả data string của phép XOR cuối cùng chính là CRC-8 

{{{
10000000 00000001 10100011 => data string 

10000000 00000001 10100011 00000000 (add 8 bits value 0) 
10000011 1 (polynomial) 
00000011 10000001 10100011 00000000 (XOR between data string and polynomial) 
10 0000111 (move polynomial to the next appear of value 1 in data string) 
01 10001111 10100011 00000000 
1 00000111 
0 10001000 10100011 00000000 
10000011 1 
00001011 00100011 00000000 
1000 00111 
0011 00011011 00000000 
10 0000111 
01 00010101 00000000 
1 00000111 
0 00010010 00000000 
10000 0111 
00010 01110000 
10 0000111 
00 01111110 
100000111 
}}}

== Cách 2: Phương pháp Table-Driven ==

Giả sử ta có chuỗi data như sau: 

MSB LSB 
10000000 00000001 10100011 00000000 = Data String (80 01 A3 h) 

1. Khởi tạo 1 biến 1 byte với giá trị là 0 (8 bits đều là 0) 

2. Thực hiện phép XOR giữa data string với byte vừa khởi tạo đó 

3. Giá trị sau khi XOR của byte đầu tiên được sử dụng để tra trong bảng tìm kiếm 

Cách tra như sau: 

- Bảng có giá trị index từ 0->255 (ví dụ tên bảng là tbl) nên khi giá trị cần tra là 00010010b (18 dec) => kết quả trả về là tbl[ 18 ] là 0x7E (01111110b) 

4. Dịch chuỗi data string 8 bits về bên trái 

5. Tiếp tục thực hiện phép XOR giữa chuỗi data string và kết quả vừa tra được trong bảng tìm kiếm (lưu ý là chúng ta luôn so byte đầu tiên bên MSB) 

6. Thực hiện tương tự cho đến byte cuối cùng thì kết quả tra được chính là CRC-8

{{{
10000000 00000001 10100011 00000000 (data string) 
00000000 (init variable) 
10000000 00000001 10100011 00000000 (XOR result) 

10001001 (result in lookup table) 

00000001 10100011 00000000 (shift 8th bit of data string to left) 
10001001 (XOR with above result lookup table) 

10110001 (result in lookup table) 

10100011 00000000 (shift 8th bit of data string to left) 
00010010 (XOR with above result lookup table) 

01111110 (result in lookup table) 

00000000 (shift 8th bit of data string to left) 
01111110 => CRC
}}}

*Cách tạo bảng tham chiếu CRC:* 

Để tạo bảng tham chiếu CRC, ta làm như sau: 

1. Tạo 1 mảng 1 chiều 256 phần tử 

2. Duyệt từng phần tử trong bảng, gán giá trị của crc bằng index của phần tử đang xét 

3. Duyệt từng bit trong crc đang xét, nếu bit đầu của crc là 0x01 thì dịch trái crc 1 bit và thực hiện hiện phép bù bit với 0x07, còn nếu không thì chỉ thực hiện dịch trái 1 bit mà thôi. Thực hiện với tất cả các bit của crc 

4. Cập nhật lại giá trị crc mới vào bảng và duyệt tiếp các phần tử còn lại.

{{{
void CCRC8Dlg::gen_crc8_table()  
{                         
	uint16_t  index_ui16;    /*table index*/             
	uint8_t   bit_ui8;           /*bit counter*/             
	uint8_t   crc_ui8;          /* CRC result*/            
	
	for ( index_ui16 = 0;  index_ui16 < 256;  index_ui16++ )            
	{                    
		crc_ui8 = index_ui16;                  
		for ( bit_ui8 = 0;  bit_ui8 < 8;  bit_ui8++ )                  
		{                          
			if ( crc_ui8 & 0x80 )                                  
				crc_ui8 = ( crc_ui8 << 1 ) ^ 0x07;                          
			else                                   
				crc_ui8 = ( crc_ui8 << 1 );                  
		}                        
		crc8Table_ui8[index_ui16] = crc_ui8;      
	}  
}

}}}
 